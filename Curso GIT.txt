--Envio dos commits locais para o repositório
# O repositório remoto será o "origin" e a branch será a "master",
git push origin master 
git push -u origin master  (Ela atrela a branch remota à local)

-- Sincronização com as novas alterações do repositório
git pull origin master

-- Visualização de log de commits
git log
git log -p
git whatchanged (indica quais arquivos foram alterados)
git whatchanged -p (indica quais alterações foram feitas)

-- No github, para add novos usuarios para contribuir, basta informar o ID.

------------------------------------------------------------------------------------------------
Conceito:
Cria-se as Branches, faz as alteracções e essas só são visiveis nas Branches que foram feitas;
Exemplo: Alterações feitas na Branch MASTER são migradas para a branch DESING. O que for feito em DESING não será mostrado em MASTER
Permite vários desenvolvedores trabalharem no mesmo código e depois agregar ao principal.
Permite remover o código antes que ele seja incorporado ao código principal.
A instabilidade de uma funcionalidade em andamento não afeta os outros desenvolvedores.
Como cada branch é um trecho de código isolado, o código do desenvolvedor A incompleto e causando erros não afetará o trabalho do desenvolvedor B, pois o código da branch A não será propagado para a branch B.

--Trabalhando com branches:
git branch + nome do branch
git branch design

-- Listar todas branches:
git branch
git branch -r (Lista as branchs remotas)
git branch -a (Lista tudo)

-- Alterar o projeto numa outra branch
git checkout + nome da branch de destino
git checkout design
PS: git checkout -b + nomedaBranche (Cria a Branche e inicia por ela) 

-- Enviando as alterações da nova Branch para o GitHub
git push origin design
git push -u origin design (Define branch local correspondente a remota)

-- Para sincronizar a Branch
git pull origin design
git push origin design

--Copiar branches remotas para máquina local (Caso um user esteja sincronizando e não tenha as Branches)
git branch -t + nomelocal + origin/nomeremoto
git branch -t design origin/design

-- Deletar uma Branch
git branch -d
git branch -D (Força deletar, caso esteja sincronizado)
# Se for remota
git push -d origin design
git push origin :design

-- Saber se foram criadas branches novas no repositorio remoto
git fetch origin

-----------------------------------------------------------------------------------
--Merge nos códigos--
Quando se tem várias pessoas trabalhando na mesma página mas alterando trechos diferentes:
- O primeiro que fizer PUSH no github estará sincronizado
- Os demais primeiro precisam fazer PULL para baixar as alterações e depois fazem o PUSH
- Após isso, o GITHUB faz o merge de todos os trechos e atualiza.

Mas o que acontece se ambos os usuários desejam alterar a mesma parte do conteúdo?
- O Github informa que há um "Conflito"
- Será preciso fazer um MERGE manualmente.
- Abrir o arquivo, deixar somente o trecho que vai ser usado
- Depois, git add + nome do arquivo, git commit e git push

Para minimizar Merges
- Sincronização (pull) frequente do repositório remoto
- Commits com pouco conteúdo
- Ferramentas gráficas para merge: diff3, Meld ou P4Merge. Em MacOSX FileMerge 

-----------------------------------------------------------------------------------
-- Trabalhando com múltiplas branches
git checkout -b desenvolvimento (Cria uma nova branch local já setando ela para trabalho)
# Faz todos os commits necessários, faz um pull, depois disso traz os commits para a branch MASTER
git checkout master
git pull

-- Trazer os commits da Branch para a master
git merge + nome da branch
git merge desenvolvimento

-- Atualiza uma Branch com base em outra
git rebase + origem + destino
git rebase master desenvolvimento
git rebase --continue
-----------------------------------------------------------------------------------
-- Controle avançado de alterações
-Descartando alterações no Working Directory (Antes de git add)
git checkout proposta_1.html
git checkout master proposta_1.html

-- Descartando alterações no Index: (Depois de git add)
git reset HEAD proposta_1.html
e depois
git checkout proposta_1.html

# variações do comando
git reset --soft
git reset --hard
git reset 

-- Descartando commits indesejados
git log (Veja o Hash do ultimo commit)
git reset b6c7cc8e3fea9b255b5845e1114588206679f609 (Descarta o ultimo commit e volta par ao commit do Hash indicado)

-- Descartar alterações que estão no último commit
git reset --hard HEAD~1

-- Guardando alterações para mais tarde: git stash
git stash (Guarda)
git stash pop (Recupera)
git stash list (Ver os registros guardados)

-- Recuperar o último estado salvo sem removê-lo da pilha de alterações?
git stash apply

-- Desfazendo commits antigos
git revert -n [hash_do_commit] (Reverte as alterações do commit)

-- Buscando por bugs em muitos commits
git bisect start
git bisect bad HEAD
git bisect good 02bfc44
git bisect bad
git bisect good
-----------------------------------------------------------------------------------
--Contribuição com opensource, técnicas avançadas e produtividade com o Git
fork = Cópia do projeto
Pull Request = Contribuir com o projeto original utilizando nossos commits
--Rastrear alterações no repositório original em nosso novo fork. 
git remote add original [caminho_do_repositorio_remoto]
EX: git remote add original git://github.com/mmsoaresgit/projeto.git

-- Carregar alterações existentes no repositório
git fetch [repositorio]
git fetch original (download das alterações mas não aplica)

-- Para aplicar as alterações
git merge original/master

-- Como aplicar o pull request no nosso projeto
- Toda pull request tem uma url padrão
https://github.com/[dono_do_projeto]/[projeto]/pull/[id_do_pull_request]

1- Fazer o fork no github
2- Fazer o clone para PC (Git Clone)
3- Entrar na pasta do projeto
4- Mudar branch para desenvolvimento (git checkout desenvolvimento)
5- Fazer as alteracoes desejadas
3- Adicionar as paginas  (git add)
4- Fazer o commit (git commit -m '')
5- Voltar para master (git checkout master)
5- Trazer os commits da Branch desenv para a master (git merge desenvolvimento)
6- Fazer a atualização das branches (git rebase master desenvolvimento)
6- Solicitar o pull request no github e aguardar aprovação.

PS: Uma outra possibilidade é utilizar o botão "Merge pull request" existente na tela do pull request
PS: Funnção watch no Github permite seguir um repositório e acompanhar seu progresso.

-- Redução dos comandos com Alias
È possivel criar atalhos (Alias) para os comandos no GIT, basta adicionar os comandos no arquivo .gitconfig
EX:
[alias]
st = status
ci = commit
br = branch
co = checkout 
df = diff

- Outra possibildade é ter vários comandos em apenas um. 
sincroniza nossa branch desenvolvimento com o repositório remoto, faz o rebase e o merge e depois realiza o push
[alias]
envia   = !git checkout master && git pull && git checkout desenvolvimento && git rebase master && git checkout master && git merge desenvolvimento && git push
publica_design = !git checkout master && git pull && git checkout design && git rebase master && git checkout master && git merge design && git push

git checkout master: altera o local de trabalho para a branch master
git pull: atualiza o histórico da branch master
git checkout dev: altera o local de trabalho para a branch dev
git rebase master: atualiza o HEAD da branch dev para receber as alterações da branch master
git checkout master: altera o local de trabalho novamente para a branch master
git merge dev: mescla as alterações da branch dev na master
git push: envia suas alterações para o repositório remoto

-- Adicionando cores na saída do console
Basta adicionar os comandos no arquivo .gitconfig
[color]
diff = auto

-- Visualizações de Log
Definir a quantidade de informações exibidas no log 
--pretty + 
oneline (Não mostra o nome do autor)
short (Não mostra data)
medium
full (Mostra o autor do commit e o do commit original)
fuller
email
raw
git log --pretty=oneline

- Usando formato próprio de LOG
--pretty
%an = nome do autor
%ad = data e hora do commit 
%s = mensagem de commit
EX: git log --pretty='%an realizou commit em %ad: %s'
git log --pretty='%an realizou commit em %ad: %s' --graph (Será exibido gráfico na tela)










